ChangeLog:1@CheckField.java
FixDescription: Ensure thread-safe access to shared variables by using synchronized blocks.
OriginalCode@8-15:
[8] 				public void run() {
[9] 					System.out.println("new thread." + ex.number);
[10] 					ex.number = 12;
[11] 					ex.num2 = 12;
[12] 					if (ex.number != 12)
[13] 						throw new RuntimeException("not equal");
[14] 					int c = ex.num2;
[15] 				}
FixedCode@8-15:
[8] 				public void run() {
[9] 					synchronized (ex) {
[10] 						System.out.println("new thread." + ex.number);
[11] 						ex.number = 12;
[12] 						ex.num2 = 12;
[13] 						if (ex.number != 12)
[14] 							throw new RuntimeException("not equal");
[15] 						int c = ex.num2;
[16] 					}
[17] 				}

OriginalCode@19-22:
[19] 				public void run() {
[20] 					ex.number = 13;
[21] 					ex.num2 = 1;
[22] 				}
FixedCode@19-22:
[19] 				public void run() {
[20] 					synchronized (ex) {
[21] 						ex.number = 13;
[22] 						ex.num2 = 1;
[23] 					}
[24] 				}

ChangeLog:2@InstanceExample.java
FixDescription: Make shared variables volatile to ensure visibility of changes across threads.
OriginalCode@4-5:
[4] 	public int number;
[5] 	public int num2;
FixedCode@4-5:
[4] 	public volatile int number;
[5] 	public volatile int num2;