package stringbuffer;
public final class StringBuffer
        implements java.io.Serializable, CharSequence {
    private char value[];
    private int count;
    private boolean shared;
    static final long serialVersionUID = 3388685877147921107L;
    public StringBuffer() {
        this(16);
    }
    public StringBuffer(int length) {
        value = new char[length];
        shared = false;
    }
    public StringBuffer(String str) {
        this(str.length() + 16);
        append(str);
    }
    public synchronized int length() {
        return count;
    }
//...
    private final void copy() {
        char newValue[] = new char[value.length];
        System.arraycopy(value, 0, newValue, 0, count);
        value = newValue;
        shared = false;
    }
    private void expandCapacity(int minimumCapacity) {
        int newCapacity = (value.length + 1) * 2;
        if (newCapacity < 0) {
            newCapacity = Integer.MAX_VALUE;
        } else if (minimumCapacity > newCapacity) {
            newCapacity = minimumCapacity;
        }
        char newValue[] = new char[newCapacity];
        System.arraycopy(value, 0, newValue, 0, count);
        value = newValue;
        shared = false;
    }
    public synchronized void getChars(int srcBegin, int srcEnd, char dst[], int dstBegin) {
        if (srcBegin < 0) {
            throw new StringIndexOutOfBoundsException(srcBegin);
        }
        if ((srcEnd < 0) || (srcEnd > count)) {
            throw new StringIndexOutOfBoundsException(srcEnd);
        }
        if (srcBegin > srcEnd) {
            throw new StringIndexOutOfBoundsException("srcBegin > srcEnd");
        }
        System.arraycopy(value, srcBegin, dst, dstBegin, srcEnd - srcBegin);
    }
    public synchronized StringBuffer append(Object obj) {
        return append(String.valueOf(obj));
    }
    public synchronized StringBuffer append(String str) {
        if (str == null) {
            str = String.valueOf(str);
        }
        int len = str.length();
        int newcount = count + len;
        if (newcount > value.length)
            expandCapacity(newcount);
        str.getChars(0, len, value, count);
        count = newcount;
        return this;
    }
    public synchronized StringBuffer append(StringBuffer sb) {
        if (sb == null) {
            sb = NULL;
        }
        int len = sb.length();
        int newcount = count + len;
        if (newcount > value.length)
            expandCapacity(newcount);
        sb.getChars(0, len, value, count);
        count = newcount;
        return this;
    }
    private static final StringBuffer NULL = new StringBuffer("null");
    public synchronized StringBuffer append(char str[]) {
        int len = str.length;
        int newcount = count + len;
        if (newcount > value.length)
            expandCapacity(newcount);
        System.arraycopy(str, 0, value, count, len);
        count = newcount;
        return this;
    }
    public synchronized StringBuffer append(char str[], int offset, int len) {
        int newcount = count + len;
        if (newcount > value.length)
            expandCapacity(newcount);
        System.arraycopy(str, offset, value, count, len);
        count = newcount;
        return this;
    }
    public synchronized StringBuffer append(boolean b) {
        if (b) {
            int newcount = count + 4;
            if (newcount > value.length)
                expandCapacity(newcount);
            value[count++] = 't';
            value[count++] = 'r';
            value[count++] = 'u';
            value[count++] = 'e';
        } else {
            int newcount = count + 5;
            if (newcount > value.length)
                expandCapacity(newcount);
            value[count++] = 'f';
            value[count++] = 'a';
            value[count++] = 'l';
            value[count++] = 's';
            value[count++] = 'e';
        }
        return this;
    }
    public synchronized StringBuffer append(char c) {
        int newcount = count + 1;
        if (newcount > value.length)
            expandCapacity(newcount);
        value[count++] = c;
        return this;
    }
    public synchronized StringBuffer delete(int start, int end) {
        if (start < 0)
            throw new StringIndexOutOfBoundsException(start);
        if (end > count)
            end = count;
        if (start > end)
            throw new StringIndexOutOfBoundsException();
        int len = end - start;
        if (len > 0) {
            if (shared)
                copy();
            System.arraycopy(value, start + len, value, start, count - end);
            count -= len;
        }
        return this;
    }
    public synchronized String substring(int start) {
        return substring(start, count);
    }
    public synchronized StringBuffer insert(int index, char str[], int offset,
                                            int len) {
        if ((index < 0) || (index > count))
            throw new StringIndexOutOfBoundsException();
        if ((offset < 0) || (offset + len < 0) || (offset + len > str.length))
            throw new StringIndexOutOfBoundsException(offset);
        if (len < 0)
            throw new StringIndexOutOfBoundsException(len);
        int newCount = count + len;
        if (newCount > value.length)
            expandCapacity(newCount);
        else if (shared)
            copy();
        System.arraycopy(value, index, value, index + len, count - index);
        System.arraycopy(str, offset, value, index, len);
        count = newCount;
        return this;
    }
    public synchronized StringBuffer insert(int offset, Object obj) {
        return insert(offset, String.valueOf(obj));
    }
    public synchronized StringBuffer insert(int offset, String str) {
        if ((offset < 0) || (offset > count)) {
            throw new StringIndexOutOfBoundsException();
        }
        if (str == null) {
            str = String.valueOf(str);
        }
        int len = str.length();
        int newcount = count + len;
        if (newcount > value.length)
            expandCapacity(newcount);
        else if (shared)
            copy();
        System.arraycopy(value, offset, value, offset + len, count - offset);
        str.getChars(0, len, value, offset);
        count = newcount;
        return this;
    }
    public synchronized StringBuffer insert(int offset, char str[]) {
        if ((offset < 0) || (offset > count)) {
            throw new StringIndexOutOfBoundsException();
        }
        int len = str.length;
        int newcount = count + len;
        if (newcount > value.length)
            expandCapacity(newcount);
        else if (shared)
            copy();
        System.arraycopy(value, offset, value, offset + len, count - offset);
        System.arraycopy(str, 0, value, offset, len);
        count = newcount;
        return this;
    }
    public StringBuffer insert(int offset, boolean b) {
        return insert(offset, String.valueOf(b));
    }
    public synchronized StringBuffer insert(int offset, char c) {
        int newcount = count + 1;
        if (newcount > value.length)
            expandCapacity(newcount);
        else if (shared)
            copy();
        System.arraycopy(value, offset, value, offset + 1, count - offset);
        value[offset] = c;
        count = newcount;
        return this;
    }
    public StringBuffer insert(int offset, int i) {
        return insert(offset, String.valueOf(i));
    }
    public StringBuffer insert(int offset, long l) {
        return insert(offset, String.valueOf(l));
    }
    public StringBuffer insert(int offset, float f) {
        return insert(offset, String.valueOf(f));
    }
}package stringbuffer;
public class StringBufferTest extends Thread {
    StringBuffer al1, al2;
    int choice;
//...
    public void run() {
        System.out.println("started " + Thread.currentThread());
        System.out.flush();
        switch (choice) {
            case 0:
                al1.append(al2);
                break;
            case 1:
                al1.delete(0, al1.length());
                break;
        }
    }
    public static void main(String args[]) {
        StringBuffer al1 = new StringBuffer("Hello");
        StringBuffer al2 = new StringBuffer("World");
        (new StringBufferTest(al1, al2, 0)).start();
        (new StringBufferTest(al2, al1, 1)).start();
    }
}